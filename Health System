using System;
using System.Collections.Generic;
using System.Linq;

public class Repository<T> where T : class
{
    private readonly List<T> _items = new List<T>();

    public void Add(T item) => _items.Add(item);

    public List<T> GetAll() => new List<T>(_items);

    public T? GetById(Func<T, bool> predicate) => _items.FirstOrDefault(predicate);

    public bool Remove(Func<T, bool> predicate)
    {
        var item = GetById(predicate);
        return item != null && _items.Remove(item);
    }
}

public class Patient
{
    public int Id { get; }
    public string Name { get; }
    public int Age { get; }
    public string Gender { get; }

    public Patient(int id, string name, int age, string gender)
    {
        Id = id;
        Name = name;
        Age = age;
        Gender = gender;
    }

    public override string ToString() => 
        $"ID: {Id}, Name: {Name}, Age: {Age}, Gender: {Gender}";
}

public class Prescription
{
    public int Id { get; }
    public int PatientId { get; }
    public string MedicationName { get; }
    public DateTime DateIssued { get; }

    public Prescription(int id, int patientId, string medicationName, DateTime dateIssued)
    {
        Id = id;
        PatientId = patientId;
        MedicationName = medicationName;
        DateIssued = dateIssued;
    }

    public override string ToString() => 
        $"ID: {Id}, Medication: {MedicationName}, Date: {DateIssued:yyyy-MM-dd}, Patient ID: {PatientId}";
}

public class HealthSystemApp
{
    private readonly Repository<Patient> _patientRepo = new Repository<Patient>();
    private readonly Repository<Prescription> _prescriptionRepo = new Repository<Prescription>();
    private Dictionary<int, List<Prescription>> _prescriptionMap = new Dictionary<int, List<Prescription>>();

    public void SeedData()
    {
        // Add patients
        _patientRepo.Add(new Patient(1, "Sarah Johnson", 42, "Female"));
        _patientRepo.Add(new Patient(2, "Michael Chen", 35, "Male"));
        _patientRepo.Add(new Patient(3, "Emma Rodriguez", 68, "Female"));
        
        // Add prescriptions
        _prescriptionRepo.Add(new Prescription(101, 1, "Lisinopril", new DateTime(2023, 10, 15)));
        _prescriptionRepo.Add(new Prescription(102, 1, "Atorvastatin", new DateTime(2023, 11, 2)));
        _prescriptionRepo.Add(new Prescription(103, 2, "Metformin", new DateTime(2023, 9, 20)));
        _prescriptionRepo.Add(new Prescription(104, 3, "Warfarin", new DateTime(2023, 10, 5)));
        _prescriptionRepo.Add(new Prescription(105, 3, "Levothyroxine", new DateTime(2023, 11, 17)));
    }

    public void BuildPrescriptionMap()
    {
        _prescriptionMap = _prescriptionRepo.GetAll()
            .GroupBy(p => p.PatientId)
            .ToDictionary(
                group => group.Key,
                group => group.OrderByDescending(p => p.DateIssued).ToList()
            );
    }

    public List<Prescription> GetPrescriptionsByPatientId(int patientId) =>
        _prescriptionMap.TryGetValue(patientId, out var prescriptions) 
            ? prescriptions 
            : new List<Prescription>();

    public void PrintAllPatients()
    {
        Console.WriteLine("=== PATIENT REGISTRY ===");
        foreach (var patient in _patientRepo.GetAll())
        {
            Console.WriteLine(patient);
        }
        Console.WriteLine();
    }

    public void PrintPrescriptionsForPatient(int patientId)
    {
        var patient = _patientRepo.GetById(p => p.Id == patientId);
        if (patient == null)
        {
            Console.WriteLine($"Patient with ID {patientId} not found.");
            return;
        }

        Console.WriteLine($"=== PRESCRIPTIONS FOR {patient.Name.ToUpper()} ===");
        var prescriptions = GetPrescriptionsByPatientId(patientId);
        
        if (prescriptions.Count == 0)
        {
            Console.WriteLine("No prescriptions found.");
            return;
        }

        foreach (var prescription in prescriptions)
        {
            Console.WriteLine(prescription);
        }
    }
}

class Program
{
    static void Main()
    {
        var app = new HealthSystemApp();
        
        // Initialize data
        app.SeedData();
        app.BuildPrescriptionMap();
        
        // Display all patients
        app.PrintAllPatients();
        
        // Get prescriptions for a sample patient
        Console.WriteLine("Enter Patient ID to view prescriptions:");
        if (int.TryParse(Console.ReadLine(), out int patientId))
        {
            app.PrintPrescriptionsForPatient(patientId);
        }
        else
        {
            Console.WriteLine("Invalid input. Displaying records for Patient ID 1:");
            app.PrintPrescriptionsForPatient(1);
        }
        
        // Display additional patient records
        Console.WriteLine("\nAdditional patient records:");
        app.PrintPrescriptionsForPatient(2);
        app.PrintPrescriptionsForPatient(3);
    }
}
