using System;
using System.Collections.Generic;

// Marker Interface
public interface IInventoryItem
{
    int Id { get; }
    string Name { get; }
    int Quantity { get; set; }
}

// Custom Exceptions
public class DuplicateItemException : Exception
{
    public DuplicateItemException(string message) : base(message) { }
}

public class ItemNotFoundException : Exception
{
    public ItemNotFoundException(string message) : base(message) { }
}

public class InvalidQuantityException : Exception
{
    public InvalidQuantityException(string message) : base(message) { }
}

// Product Classes
public class ElectronicItem : IInventoryItem
{
    public int Id { get; }
    public string Name { get; }
    public int Quantity { get; set; }
    public string Brand { get; }
    public int WarrantyMonths { get; }

    public ElectronicItem(int id, string name, int quantity, string brand, int warrantyMonths)
    {
        Id = id;
        Name = name;
        Quantity = quantity;
        Brand = brand;
        WarrantyMonths = warrantyMonths;
    }

    public override string ToString() => 
        $"[Electronics] ID: {Id}, {Name} ({Brand}), Qty: {Quantity}, Warranty: {WarrantyMonths} months";
}

public class GroceryItem : IInventoryItem
{
    public int Id { get; }
    public string Name { get; }
    public int Quantity { get; set; }
    public DateTime ExpiryDate { get; }

    public GroceryItem(int id, string name, int quantity, DateTime expiryDate)
    {
        Id = id;
        Name = name;
        Quantity = quantity;
        ExpiryDate = expiryDate;
    }

    public override string ToString() => 
        $"[Grocery] ID: {Id}, {Name}, Qty: {Quantity}, Expires: {ExpiryDate:yyyy-MM-dd}";
}

// Generic Repository
public class InventoryRepository<T> where T : IInventoryItem
{
    private readonly Dictionary<int, T> _items = new Dictionary<int, T>();

    public void AddItem(T item)
    {
        if (_items.ContainsKey(item.Id))
            throw new DuplicateItemException($"Item with ID {item.Id} already exists");
        
        _items.Add(item.Id, item);
    }

    public T GetItemById(int id)
    {
        if (!_items.ContainsKey(id))
            throw new ItemNotFoundException($"Item with ID {id} not found");
        
        return _items[id];
    }

    public void RemoveItem(int id)
    {
        if (!_items.ContainsKey(id))
            throw new ItemNotFoundException($"Cannot remove - item with ID {id} not found");
        
        _items.Remove(id);
    }

    public List<T> GetAllItems() => new List<T>(_items.Values);

    public void UpdateQuantity(int id, int newQuantity)
    {
        if (newQuantity < 0)
            throw new InvalidQuantityException($"Quantity cannot be negative ({newQuantity})");
        
        if (!_items.ContainsKey(id))
            throw new ItemNotFoundException($"Cannot update - item with ID {id} not found");
        
        var item = _items[id];
        item.Quantity = newQuantity;
    }
}

// Warehouse Manager
public class WarehouseManager
{
    public InventoryRepository<ElectronicItem> Electronics { get; } = new();
    public InventoryRepository<GroceryItem> Groceries { get; } = new();

    public void SeedData()
    {
        // Seed electronics
        Electronics.AddItem(new ElectronicItem(101, "Smartphone", 25, "Samsung", 24));
        Electronics.AddItem(new ElectronicItem(102, "Laptop", 12, "Dell", 36));
        Electronics.AddItem(new ElectronicItem(103, "Headphones", 50, "Sony", 12));
        
        // Seed groceries
        Groceries.AddItem(new GroceryItem(201, "Cereal", 40, DateTime.Now.AddMonths(6)));
        Groceries.AddItem(new GroceryItem(202, "Milk", 30, DateTime.Now.AddDays(7)));
        Groceries.AddItem(new GroceryItem(203, "Eggs", 60, DateTime.Now.AddDays(14)));
    }

    public void PrintAllItems<T>(InventoryRepository<T> repo) where T : IInventoryItem
    {
        foreach (var item in repo.GetAllItems())
        {
            Console.WriteLine(item);
        }
    }

    public void IncreaseStock<T>(InventoryRepository<T> repo, int id, int quantity) where T : IInventoryItem
    {
        try
        {
            var item = repo.GetItemById(id);
            repo.UpdateQuantity(id, item.Quantity + quantity);
            Console.WriteLine($"Increased stock for ID {id} by {quantity}. New quantity: {item.Quantity}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error increasing stock: {ex.Message}");
        }
    }

    public void RemoveItemById<T>(InventoryRepository<T> repo, int id) where T : IInventoryItem
    {
        try
        {
            repo.RemoveItem(id);
            Console.WriteLine($"Item ID {id} removed successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing item: {ex.Message}");
        }
    }
}

class Program
{
    static void Main()
    {
        var manager = new WarehouseManager();
        
        // Seed data
        try
        {
            manager.SeedData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Seeding error: {ex.Message}");
        }

        Console.WriteLine("===== ELECTRONICS INVENTORY =====");
        manager.PrintAllItems(manager.Electronics);
        
        Console.WriteLine("\n===== GROCERY INVENTORY =====");
        manager.PrintAllItems(manager.Groceries);
        
        // Demonstrate exception scenarios
        Console.WriteLine("\n===== EXCEPTION DEMONSTRATIONS =====");
        
        // 1. Add duplicate item
        try
        {
            Console.WriteLine("\nAttempting to add duplicate smartphone...");
            manager.Electronics.AddItem(new ElectronicItem(101, "Duplicate Phone", 5, "BrandX", 12));
        }
        catch (DuplicateItemException ex)
        {
            Console.WriteLine($"Duplicate Error: {ex.Message}");
        }
        
        // 2. Remove non-existent item
        Console.WriteLine("\nAttempting to remove non-existent item...");
        manager.RemoveItemById(manager.Groceries, 999);
        
        // 3. Update with invalid quantity
        try
        {
            Console.WriteLine("\nAttempting to set negative quantity...");
            manager.Electronics.UpdateQuantity(102, -5);
        }
        catch (InvalidQuantityException ex)
        {
            Console.WriteLine($"Quantity Error: {ex.Message}");
        }
        
        // 4. Get non-existent item
        try
        {
            Console.WriteLine("\nAttempting to get non-existent item...");
            var item = manager.Groceries.GetItemById(999);
        }
        catch (ItemNotFoundException ex)
        {
            Console.WriteLine($"Lookup Error: {ex.Message}");
        }
        
        // Valid operations demonstration
        Console.WriteLine("\n===== VALID OPERATIONS =====");
        
        // Increase stock
        Console.WriteLine("\nIncreasing laptop stock by 10...");
        manager.IncreaseStock(manager.Electronics, 102, 10);
        
        // Remove item
        Console.WriteLine("\nRemoving eggs from grocery inventory...");
        manager.RemoveItemById(manager.Groceries, 203);
        
        // Final inventories
        Console.WriteLine("\n===== UPDATED ELECTRONICS INVENTORY =====");
        manager.PrintAllItems(manager.Electronics);
        
        Console.WriteLine("\n===== UPDATED GROCERY INVENTORY =====");
        manager.PrintAllItems(manager.Groceries);
    }
}
